Description: 'EKS Worker Node Group'

Parameters:

  Project:
    Type: String

  VPC:
    Type: String

  ClusterControlPlaneSecurityGroup:
    Type: String

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  NodeImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id

  NodeInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 3

  DesiredCapacity:
    Type: Number
    Description: Desired capacity of the cluster
    Default: 1

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String

  ClusterControlPlaneSecurityGroup:
    Type: String

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

Resources:

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NodeSecurityGroup"
        - Key: Project
          Value: !Ref Project


  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535


  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

## Start with the actual nodes fom here

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
          ## NEEDED BY CLUSTER AUTOSCALER
          ## https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md
        - PolicyName: !Sub "EKSNodesAutoScaling-${NodeGroupName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Action:
                - 'autoscaling:DescribeTags'
                - 'autoscaling:DescribeAutoScalingGroups'
                - 'autoscaling:DescribeAutoScalingInstances'
                - 'autoscaling:DescribeLaunchConfigurations'
                - 'autoscaling:DescribeScalingActivities'
                - 'autoscaling:SetDesiredCapacity'
                - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              Effect: Allow
              Resource: "*"
          ## Uncomment this if you are going to use the AWS ALB Ingress Controller
          ## https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html
          ###############################################################
        # - PolicyName: !Sub "EKSIngressProvisioning-${NodeGroupName}"
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #     - Effect: Allow
        #       Action:
        #       - ec2:AuthorizeSecurityGroupIngress
        #       - ec2:CreateSecurityGroup
        #       - ec2:CreateTags
        #       - ec2:DeleteTags
        #       - ec2:DeleteSecurityGroup
        #       - ec2:DescribeAccountAttributes
        #       - ec2:DescribeAddresses
        #       - ec2:DescribeInstances
        #       - ec2:DescribeInstanceStatus
        #       - ec2:DescribeInternetGateways
        #       - ec2:DescribeNetworkInterfaces
        #       - ec2:DescribeSecurityGroups
        #       - ec2:DescribeSubnets
        #       - ec2:DescribeTags
        #       - ec2:DescribeVpcs
        #       - ec2:ModifyInstanceAttribute
        #       - ec2:ModifyNetworkInterfaceAttribute
        #       - ec2:RevokeSecurityGroupIngress
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - elasticloadbalancing:AddListenerCertificates
        #       - elasticloadbalancing:AddTags
        #       - elasticloadbalancing:CreateListener
        #       - elasticloadbalancing:CreateLoadBalancer
        #       - elasticloadbalancing:CreateRule
        #       - elasticloadbalancing:CreateTargetGroup
        #       - elasticloadbalancing:DeleteListener
        #       - elasticloadbalancing:DeleteLoadBalancer
        #       - elasticloadbalancing:DeleteRule
        #       - elasticloadbalancing:DeleteTargetGroup
        #       - elasticloadbalancing:DeregisterTargets
        #       - elasticloadbalancing:DescribeListenerCertificates
        #       - elasticloadbalancing:DescribeListeners
        #       - elasticloadbalancing:DescribeLoadBalancers
        #       - elasticloadbalancing:DescribeLoadBalancerAttributes
        #       - elasticloadbalancing:DescribeRules
        #       - elasticloadbalancing:DescribeSSLPolicies
        #       - elasticloadbalancing:DescribeTags
        #       - elasticloadbalancing:DescribeTargetGroups
        #       - elasticloadbalancing:DescribeTargetGroupAttributes
        #       - elasticloadbalancing:DescribeTargetHealth
        #       - elasticloadbalancing:ModifyListener
        #       - elasticloadbalancing:ModifyLoadBalancerAttributes
        #       - elasticloadbalancing:ModifyRule
        #       - elasticloadbalancing:ModifyTargetGroup
        #       - elasticloadbalancing:ModifyTargetGroupAttributes
        #       - elasticloadbalancing:RegisterTargets
        #       - elasticloadbalancing:RemoveListenerCertificates
        #       - elasticloadbalancing:RemoveTags
        #       - elasticloadbalancing:SetIpAddressType
        #       - elasticloadbalancing:SetSecurityGroups
        #       - elasticloadbalancing:SetSubnets
        #       - elasticloadbalancing:SetWebACL
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - iam:CreateServiceLinkedRole
        #       - iam:GetServerCertificate
        #       - iam:ListServerCertificates
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - cognito-idp:DescribeUserPoolClient
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - waf-regional:GetWebACLForResource
        #       - waf-regional:GetWebACL
        #       - waf-regional:AssociateWebACL
        #       - waf-regional:DisassociateWebACL
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - tag:GetResources
        #       - tag:TagResources
        #       Resource: "*"
        #     - Effect: Allow
        #       Action:
        #       - waf:GetWebACL
        #       Resource: "*"

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier: !Ref Subnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-${NodeGroupName}-Node"
        PropagateAtLaunch: 'true'
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: !Ref NodeAutoScalingGroupMinSize

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'false'
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

Outputs:

  NodeSecurityGroup:
    Description: Security group for the worker nodes
    Value: !Ref NodeSecurityGroup
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn